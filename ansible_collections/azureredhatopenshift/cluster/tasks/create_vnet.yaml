---
- name: create_vnet | Create NSGs
  when: nsgs | d(False)
  azure.azcollection.azure_rm_securitygroup:
    name: "{{ item.name }}"
    resource_group: "{{ resource_group }}"
    rules: "{{ item.rules }}"
  register: create_nsgs
  loop: "{{ nsgs }}"
  delegate_to: localhost

- name: create_vnet | Debug create_nsgs
  when: nsgs | d(False)
  ansible.builtin.debug:
    var: create_nsgs
    verbosity: 1

- name: create_vnet | Create VNET with az cli if unsupported options are needed
  when: vnet_enable_encryption | d(False) or vnet_encryption_enforcement_policy | d(False)
  block:
  - name: create_vnet | Get Vnet state
    azure.azcollection.azure_rm_virtualnetwork_info:
      name: "{{ vnet_name | default('aro-vnet') }}"
      resource_group: "{{ resource_group }}"
    delegate_to: localhost
    register: vnet_info
  - name: create_vnet | Az network vnet create
    when: vnet_info.virtualnetworks[0].provisioning_state | d("None") != "Succeeded"
    ansible.builtin.command:
      argv: "{{ argv | reject('equalto', omit) | list }}"
    vars:
      prefixes:
        - "{{ network_prefix_cidr }}"
        - "{% if apiserver_visibility is defined and apiserver_visibility == 'Private'
          %}{{ jumphost_cidr | default('192.168.254.240/28') }}{% else %}{{ omit }}{% endif %}"
      argv:
        - az
        - network
        - vnet
        - create
        - --name={{ vnet_name | default('aro-vnet') }}
        - --resource-group={{ resource_group }}
        - --address-prefixes={{ prefixes | reject('equalto', omit) | list }}
        - --location={{ location }}
        - "{% if dns_servers is defined %}--dns-servers={{ dns_servers }}{% else %}{{ omit }}{% endif %}"
        - "{% if vnet_enable_encryption is defined %}--enable-encryption={{ vnet_enable_encryption | lower }}{% else %}{{ omit }}{% endif %}"
        - "{% if vnet_encryption_enforcement_policy is defined %}--encryption-enforcement-policy={{ vnet_encryption_enforcement_policy }}{% else %}{{ omit }}{% endif %}"
    register: az_network_vnet_create
    changed_when: az_network_vnet_create.rc == 0
    delegate_to: localhost
- name: create_vnet | Vnet
  when: vnet_enable_encryption | d(False) == False or vnet_encryption_enforcement_policy | d(False) == False
  azure.azcollection.azure_rm_virtualnetwork:
    name: "{{ vnet_name | default('aro-vnet') }}"
    resource_group: "{{ resource_group }}"
    address_prefixes_cidr: "{{ prefixes | reject('equalto', omit) | list }}"
    location: "{{ location }}"
    dns_servers: "{{ dns_servers | default(omit) }}"
    tags:
      createdby: "{{ currentuser_info.userPrincipalName | default(lookup('env', 'AZURE_CLIENT_ID')) | default('unknown') }}"
      createdwith: "ansible"
      purge: "true"
  vars:
    prefixes:
      - "{{ network_prefix_cidr }}"
      - "{% if apiserver_visibility is defined and apiserver_visibility == 'Private'
        %}{{ jumphost_cidr | default('192.168.254.240/28') }}{% else %}{{ omit }}{% endif %}"
  delegate_to: localhost
  register: vnet_state
- name: create_vnet | Get Vnet state
  when: vnet_state is changed or az_network_vnet_create is changed
  azure.azcollection.azure_rm_virtualnetwork_info:
    name: "{{ vnet_name | default('aro-vnet') }}"
    resource_group: "{{ resource_group }}"
  delegate_to: localhost
  register: vnet_info
- name: create_vnet | Debug vnet_state
  ansible.builtin.debug:
    var: vnet_info
    verbosity: 1

- name: create_vnet | Create route table
  when: "routes is defined"
  block:
    - name: create_vnet | Create route table
      azure.azcollection.azure_rm_routetable:
        name: "{{ vnet_name | default('aro-vnet') }}-rt"
        resource_group: "{{ resource_group }}"
        location: "{{ location }}"
        tags:
          createdby: "{{ currentuser_info.userPrincipalName | default(lookup('env', 'AZURE_CLIENT_ID')) | default('unknown')}}"
          createdwith: "ansible"
          purge: "true"
      delegate_to: localhost
      register: route_table_state
    - name: create_vnet | Debug route_table_state
      ansible.builtin.debug:
        var: route_table_state
        verbosity: 1
    - name: create_vnet | Create routes
      azure.azcollection.azure_rm_route:
        resource_group: "{{ resource_group }}"
        name: "{{ item.name }}"
        address_prefix: "{{ item.address_prefix }}"
        next_hop_type: "{{ item.next_hop_type }}"
        route_table_name: "{{ vnet_name | default('aro-vnet') }}-rt"
      loop: "{{ routes }}"
      delegate_to: localhost
      register: route_entry_state
    - name: create_vnet | Debug route_entry_state
      ansible.builtin.debug:
        var: route_entry_state
        verbosity: 1

- name: create_vnet | Master subnet
  azure.azcollection.azure_rm_subnet:
    name: master
    virtual_network_name: "{{ vnet_name | default('aro-vnet') }}"
    address_prefix_cidr: "{{ master_cidr }}"
    resource_group: "{{ resource_group }}"
    # Setting this statically to "Disabled" because otherwise updating the subnet fails with
    # Error creating or updating subnet master - (PrivateLinkServiceNetworkPoliciesCannotBeEnabledOnPrivateLinkServiceSubnet) Private link service network
    # policies cannot be enabled on private link service subnet
    private_link_service_network_policies: Disabled
    route_table: "{% if routes is defined %}{{ vnet_name | default('aro-vnet') }}-rt{% else %}{{ omit }}{% endif %}"
    security_group: >-
      {% if master_nsg is defined %}
      {
        "name": "{{ master_nsg }}",
        "resource_group": "{{ resource_group }}"
      }
      {% else %}{{ omit }}{% endif %}
  delegate_to: localhost
  register: master_subnet_state
- name: create_vnet | Debug master_subnet_state
  ansible.builtin.debug:
    var: master_subnet_state
    verbosity: 1
- name: create_vnet | Worker subnet
  azure.azcollection.azure_rm_subnet:
    name: worker
    virtual_network_name: "{{ vnet_name | default('aro-vnet') }}"
    address_prefix_cidr: "{{ worker_cidr }}"
    resource_group: "{{ resource_group }}"
    route_table: "{% if routes is defined %}{{ vnet_name | default('aro-vnet') }}-rt{% else %}{{ omit }}{% endif %}"
    security_group: >-
      {% if worker_nsg is defined %}
      {
        "name": "{{ master_nsg }}",
        "resource_group": "{{ resource_group }}"
      }
      {% else %}{{ omit }}{% endif %}
  delegate_to: localhost
  register: worker_subnet_state
- name: create_vnet | Debug worker_subnet_state
  ansible.builtin.debug:
    var: worker_subnet_state
    verbosity: 1
