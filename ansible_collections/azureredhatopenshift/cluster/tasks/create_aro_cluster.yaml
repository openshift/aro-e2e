---
- name: create_aro_cluster | Set up a jumphost for private clusters
  when: apiserver_visibility | d("Public") == "Private"
  ansible.builtin.include_tasks:
    file: ../../tasks/create_jumphost.yaml

- name: create_aro_cluster | Gather localhost facts
  # Registering localhost_facts as a workaround for delegation/hostname resolution issues
  # in `Gathering Facts` task when setting `gather_facts: true` in deployment playbook.
  ansible.builtin.setup:
  delegate_to: localhost
  register: localhost_facts

- name: create_aro_cluster | Debug localhost_facts
  ansible.builtin.debug:
    var: localhost_facts
    verbosity: 2 # Higher verbosity because this prints a lot of data

- name: create_aro_cluster | Enable preview az aro extension (by version number)
  when: AZAROEXT_VERSION is defined and "://" not in AZAROEXT_VERSION
  block:
    - name: create_aro_cluster | Install specifc azaroext version
      ansible.builtin.command:
        argv:
          - az
          - extension
          - add
          - --source=https://arosvc.blob.core.windows.net/azext/aro-{{ AZAROEXT_VERSION }}-py2.py3-none-any.whl
          - --upgrade
          - --yes
      delegate_to: localhost
      register: azaroext_install
      changed_when: azaroext_install.rc == 0
    - name: create_aro_cluster | Debug azaroext_install
      ansible.builtin.debug:
        var: azaroext_install
        verbosity: 1
    - name: create_aro_cluster | List az extensions
      ansible.builtin.command:
        argv: ["az", "extension", "list"]
      delegate_to: localhost
      register: az_extension_list
      changed_when: false
    - name: create_aro_cluster | Show az extensions
      ansible.builtin.debug:
        var: az_extension_list.stdout_lines
- name: create_aro_cluster | Git branch azaroext
  when: AZAROEXT_VERSION is defined and AZAROEXT_VERSION.endswith("ARO-RP.git")
  block:
    - name: create_aro_cluster | Checkout git repo
      ansible.builtin.git:
        repo: "{{ AZAROEXT_VERSION }}"
        dest: /usr/src/ARO-RP/
        depth: 1
      delegate_to: localhost
    - name: create_aro_cluster | Make az extension
      ansible.builtin.command:
        argv: ["make", "az"]
        chdir: "/usr/src/ARO-RP/"
      delegate_to: localhost
    - name: create_aro_cluster | Install aro extension
      ansible.builtin.file:
        state: link
        src: /usr/src/ARO-RP/python/az/aro
        dest: /opt/app-root/src/.azure/cliextensions/aro
      register: az_extension_add
      delegate_to: localhost
    - name: create_aro_cluster | Debug azaroext_install
      ansible.builtin.debug:
        var: az_extension_add
        verbosity: 1
    - name: create_aro_cluster | List az extensions
      ansible.builtin.command:
        argv: ["az", "extension", "list"]
      delegate_to: localhost
      register: az_extension_list
      changed_when: false
    - name: create_aro_cluster | Show az extensions
      ansible.builtin.debug:
        var: az_extension_list.stdout_lines

- name: create_aro_cluster | Custom service principal
  when: create_csp | d(False)
  block:
    - name: create_aro_cluster | Create cluster service principal
      ansible.builtin.command:
        argv:
          [
            "az",
            "ad",
            "sp",
            "create-for-rbac",
            "-n",
            "{{ name }}-{{ resource_group }}-sp",
            "--role",
            "contributor",
            "--scopes",
            "{{ rg_info.state.id }}",
            "-o=yaml",
          ]
      delegate_to: localhost
      register: create_sp_output
    - name: create_aro_cluster | Set fact csp_info
      when: create_sp_output is success
      ansible.builtin.set_fact:
        csp_info: "{{ create_sp_output.stdout | from_yaml }}"
    - name: create_aro_cluster | Show service principal
      ansible.builtin.debug:
        var: csp_info
        verbosity: 2

# In case ansible was stopped and then re-run on a cluster that's still creating or deleting
- name: create_aro_cluster | Wait for existing cluster to finish
  azureredhatopenshift.cluster.azure_rm_openshiftmanagedcluster_info:
    api_version: "{{ aro_api_version | d(omit) }}"
    rp_mode: "{% if platform_workload_identities is defined %}development{% else %}{{ omit }}{% endif %}"
    name: "{{ name }}"
    resource_group: "{{ resource_group }}"
  delegate_to: localhost
  register: aro_cluster_create_wait
  failed_when: |
    aro_cluster_create_wait.clusters.properties.provisioningState | d ("") == "Creating"
    or aro_cluster_create_wait.clusters.properties.provisioningState | d ("") == "Deleting"
  retries: 60
  delay: 60

- name: create_aro_cluster | Create cluster via module
  when: aro_api_version is defined
  ansible.builtin.include_tasks:
    file: ../../tasks/create_cluster_module.yaml

- name: create_aro_cluster | Create cluster via cli
  when: aro_api_version is not defined
  ansible.builtin.include_tasks:
    file: ../../tasks/create_cluster_azcli.yaml

- name: create_aro_cluster | Wait for cluster to finish creating or deleting
  azureredhatopenshift.cluster.azure_rm_openshiftmanagedcluster_info:
    api_version: "{{ aro_api_version | d(omit) }}"
    rp_mode: "{% if platform_workload_identities is defined %}development{% else %}{{ omit }}{% endif %}"
    name: "{{ name }}"
    resource_group: "{{ resource_group }}"
  delegate_to: localhost
  register: aro_cluster_create_wait
  failed_when: |
    aro_cluster_create_wait.clusters.properties.provisioningState | d ("Creating") == "Creating"
    or aro_cluster_create_wait.clusters.properties.provisioningState | d ("Creating") == "Deleting"
  retries: 60
  delay: 60

- name: create_aro_cluster | Get cluster status
  azureredhatopenshift.cluster.azure_rm_openshiftmanagedcluster_info:
    api_version: "{{ aro_api_version | d(omit) }}"
    rp_mode: "{% if platform_workload_identities is defined %}development{% else %}{{ omit }}{% endif %}"
    name: "{{ name }}"
    resource_group: "{{ resource_group }}"
  delegate_to: localhost
  register: aro_cluster_state
  failed_when: aro_cluster_state.clusters.properties.provisioningState | d ("") == "Failed"
- name: create_aro_cluster | Debug aro_cluster_state
  ansible.builtin.debug:
    var: aro_cluster_state
    verbosity: 1

- name: create_aro_cluster | Show cluster and deployment state
  ansible.builtin.debug:
    msg:
      - "Cluster provisioning state: {{ aro_cluster_state.clusters.properties.provisioningState | d('Unknown') }}"

- name: create_aro_cluster | Get resources deployment failure details
  ansible.builtin.command:
    argv:
      - az
      - deployment
      - group
      - show
      - -n=resources
      - -g
      - "{{ aro_cluster_state.clusters.properties.clusterProfile.resourceGroupId | basename }}"
      - -o=yaml
  delegate_to: localhost
  register: resources_deployment_details_output
  ignore_errors: true
  changed_when: resources_deployment_details_output.rc == 0
- name: create_aro_cluster | Set fact resource_deployment_details
  when: resources_deployment_details_output is success
  ansible.builtin.set_fact:
    resources_deployment_details: "{{ resources_deployment_details_output.stdout | from_yaml }}"
- name: create_aro_cluster | Show resources deployment details
  when: resources_deployment_details_output is success
  ansible.builtin.debug:
    msg: "Deployment `resources` state: {{ resources_deployment_details.properties.provisioningState }}"
- name: create_aro_cluster | Show resources deployment failure details
  when: resources_deployment_details_output is success and resources_deployment_details.properties.provisioningState != "Succeeded"
  ansible.builtin.debug:
    var: resources_deployment_details.properties.error

- name: create_aro_cluster | Get storage deployment failure details
  ansible.builtin.command:
    argv:
      - az
      - group
      - deployment
      - show
      - -n=storage
      - -g
      - "{{ aro_cluster_state.clusters.properties.clusterProfile.resourceGroupId | basename }}"
      - -o=yaml
  delegate_to: localhost
  register: storage_deployment_details_output
  ignore_errors: true
  changed_when: storage_deployment_details_output.rc == 0
- name: create_aro_cluster | Set fact storage_deployment_details
  when: storage_deployment_details_output is success
  ansible.builtin.set_fact:
    storage_deployment_details: "{{ storage_deployment_details_output.stdout | from_yaml }}"
- name: create_aro_cluster | Show storage deployment details
  when: storage_deployment_details_output is success
  ansible.builtin.debug:
    msg: "Deployment `storage` state: {{ storage_deployment_details.properties.provisioningState }}"
- name: create_aro_cluster | Show storage deployment failure details
  when: storage_deployment_details is success and storage_deployment_details.properties.provisioningState != "Succeeded"
  ansible.builtin.debug:
    var: storage_deployment_details.properties.error

- name: create_aro_cluster | Fail if provisioningState is not Succeeded
  when: aro_cluster_state.clusters.properties.provisioningState != "Succeeded"
  block:
    - name: create_aro_cluster | Print az aro create stdout
      ansible.builtin.debug:
        var: az_aro_create_output.stdout_lines
    - name: create_aro_cluster | Print az aro create stderr
      ansible.builtin.debug:
        var: az_aro_create_output.stderr_lines
    - name: create_aro_cluster | Check cluster status
      ansible.builtin.fail:
        msg: Cluster creation did not succeed

- name: create_aro_cluster | Configure jumphost /etc/hosts entry for custom DNS - apiserver
  when: apiserver_visibility | d("Public") == "Private" and domain is defined
  ansible.builtin.command:
    argv:
      - "az"
      - "vm"
      - "run-command"
      - "invoke"
      - "--name"
      - "jumphost"
      - "--resource-group"
      - "{{ resource_group }}"
      - "--command-id"
      - "RunShellScript"
      - "--scripts"
      - "echo {{ apiserver_ip }} {{ apiserver_host }} >> /etc/hosts"
      - "-o=yaml"
  vars:
    apiserver_ip: "{{ aro_cluster_state.clusters.properties.apiserverProfile.ip }}"
    apiserver_host: "{{ aro_cluster_state.clusters.properties.apiserverProfile.url
        | urlsplit('hostname') }}"
  delegate_to: localhost
  register: az_vm_runcommand_jumphost
  changed_when: az_vm_runcommand_jumphost.rc == 0
- name: create_aro_cluster | Configure jumphost /etc/hosts entry for custom DNS - ingress
  when: apiserver_visibility | d("Public") == "Private" and domain is defined
  ansible.builtin.command:
    argv:
      - "az"
      - "vm"
      - "run-command"
      - "invoke"
      - "--name"
      - "jumphost"
      - "--resource-group"
      - "{{ resource_group }}"
      - "--command-id"
      - "RunShellScript"
      - "--scripts"
      - "echo {{ ingress_ip }} {{ console_host }} {{
        console_host | replace('console-openshift-console', 'downloads-openshift-console')
        }} >> /etc/hosts"
      - "-o=yaml"
  vars:
    ingress_ip: "{{ aro_cluster_state.clusters.properties.ingressProfiles[0].ip }}"
    console_host: "{{ aro_cluster_state.clusters.properties.consoleProfile.url | urlsplit('hostname') }}"
  delegate_to: localhost
  register: az_vm_runcommand_jumphost
  changed_when: az_vm_runcommand_jumphost.rc == 0

- name: create_aro_cluster | Local RP certificate
  when: rp_mode|default("production") == "development"
  community.crypto.get_certificate:
    host: localhost
    port: "8443"
    get_certificate_chain: true
  retries: 3
  delay: 60
  delegate_to: "{{ delegation }}"
  register: localrp_certificate
- name: create_aro_cluster | Debug localrp_certificate
  ansible.builtin.debug:
    var: localrp_certificate
    verbosity: 1
- name: create_aro_cluster | Trust the local RP's' certificate (Debian version)
  when: rp_mode|default("production") == "development" and delegation != "localhost"
  block:
    - name: create_aro_cluster | Install local RP's certificate locally
      ansible.builtin.copy:
        dest: /usr/local/share/ca-certificates/aro-rp.crt
        content: "{% for item in localrp_certificate.verified_chain %}{{ item }}{% endfor %}"
        mode: "0644"
        owner: root
        group: root
      become: true
      delegate_to: "{{ delegation }}"
      register: localrp_ca_certificate
    - name: create_aro_cluster | Update CA Certificates
      when: localrp_ca_certificate is changed # noqa no-handler
      ansible.builtin.command:
        argv: ["update-ca-certificates"]
      become: true
      delegate_to: "{{ delegation }}"
      register: update_ca_certificates
      changed_when: true
    - name: create_aro_cluster | Debug update_ca_certificates
      ansible.builtin.debug:
        var: update_ca_certificates.stdout_lines
        verbosity: 1
- name: create_aro_cluster | Trust the local RP's certificate (RHEL version)
  when: rp_mode|default("production") == "development" and delegation == "localhost"
  block:
    - name: create_aro_cluster | Install local RP's certificate locally (RHEL version)
      ansible.builtin.copy:
        dest: /etc/pki/ca-trust/source/anchors/aro-rp.crt
        content: "{% for item in localrp_certificate.verified_chain %}{{ item }}{% endfor %}"
        mode: "0644"
        owner: root
        group: root
      become: true
      delegate_to: "{{ delegation }}"
      register: localrp_ca_certificate
    - name: create_aro_cluster | Update CA Certificates
      when: localrp_ca_certificate is changed # noqa no-handler
      ansible.builtin.command:
        argv: ["update-ca-trust"]
      become: true
      delegate_to: "{{ delegation }}"
      register: update_ca_certificates
      changed_when: true
    - name: create_aro_cluster | Debug update_ca_certificates
      when: ansible_verbosity > 0
      ansible.builtin.debug:
        var: update_ca_certificates.stdout_lines
- name: create_aro_cluster | Debug localrp_ca_certificate
  when: localrp_ca_certificate is defined
  ansible.builtin.debug:
    var: localrp_ca_certificate
    verbosity: 1
- name: create_aro_cluster | Get cluster kubeconfig
  ansible.builtin.command:
    argv:
      - "az"
      - "aro"
      - "get-admin-kubeconfig"
      - "--name={{ name }}"
      - "--resource-group={{ resource_group }}"
      - "-f={{ inventory_hostname }}.kubeconfig"
    creates: "{{ inventory_hostname }}.kubeconfig"
  environment:
    RP_MODE: development
  delegate_to: localhost
- name: create_aro_cluster | Copy cluster kubeconfig to jumphost
  when: delegation != "localhost"
  ansible.builtin.copy:
    src: "{{ inventory_hostname }}.kubeconfig"
    dest: "{{ inventory_hostname }}.kubeconfig"
    mode: "0644"
  delegate_to: "{{ delegation }}"

- name: create_aro_cluster | Cluster api certificate
  community.crypto.get_certificate:
    host: "{{ aro_cluster_state.clusters.properties.apiserverProfile.url | urlsplit('hostname') }}"
    port: "{{ aro_cluster_state.clusters.properties.apiserverProfile.url | urlsplit('port') }}"
    get_certificate_chain: true
  retries: 3
  delay: 60
  delegate_to: "{{ delegation }}"
  register: apiserver_certificate
- name: create_aro_cluster | Debug apiserver_certificate
  ansible.builtin.debug:
    var: apiserver_certificate
    verbosity: 1

- name: create_aro_cluster | Cluster ingress certificate
  community.crypto.get_certificate:
    host: "{{ aro_cluster_state.clusters.properties.consoleProfile.url | urlsplit('hostname') }}"
    # port: "{{ aro_cluster_state.clusters.properties.consoleProfile.url | urlsplit('port') }} | default(443)"
    port: 443
    get_certificate_chain: true
  retries: 3
  delay: 60
  delegate_to: "{{ delegation }}"
  register: ingress_certificate
- name: create_aro_cluster | Debug ingress_certificate
  ansible.builtin.debug:
    var: ingress_certificate
    verbosity: 1

- name: create_aro_cluster | Cluster healthz
  ansible.builtin.uri:
    url: "{{ aro_cluster_state.clusters.properties.apiserverProfile.url }}healthz"
    return_content: true
    validate_certs: false
    status_code:
      - 200
  retries: 3
  delay: 60
  register: api_healthz
  failed_when: api_healthz.status != 200 or api_healthz.content != "ok"
  delegate_to: "{{ delegation }}"
- name: create_aro_cluster | Debug api_healthz
  ansible.builtin.debug:
    var: api_healthz
    verbosity: 1

- name: create_aro_cluster | Get apiserver configuration
  kubernetes.core.k8s_info:
    kubeconfig: "{{ inventory_hostname }}.kubeconfig"
    api_version: config.openshift.io/v1
    kind: APIServer
    name: cluster
    validate_certs: false
  register: apiserver_cluster
  delegate_to: "{{ delegation }}"
- name: create_aro_cluster | Debug apiserver_cluster
  ansible.builtin.debug:
    var: apiserver_cluster
    verbosity: 1

- name: create_aro_cluster | Get serving certificate
  # NOTE: miwi doesn't have this, why? It only has "spec": {"audit": {"profile": "Default"}}
  when: "apiserver_cluster.resources[0].spec.servingCerts.namedCertificates[0].servingCertificate.name | d('') != ''"
  kubernetes.core.k8s_info:
    kubeconfig: "{{ inventory_hostname }}.kubeconfig"
    api_version: v1
    namespace: openshift-config
    kind: Secret
    name: "{{ apiserver_cluster.resources[0].spec.servingCerts.namedCertificates[0].servingCertificate.name }}"
    validate_certs: false
  register: apiserver_servingcert
  delegate_to: "{{ delegation }}"
- name: create_aro_cluster | Debug apiserver_servingcert
  when: apiserver_servingcert.resources[0].data["tls.crt"] | d(None) != None
  ansible.builtin.debug:
    msg: '{{ apiserver_servingcert.resources[0].data["tls.crt"] | b64decode }}'
    verbosity: 1

- name: create_aro_cluster | Trust the cluster's certificate (Debian version)
  when: delegation != "localhost"
  block:
    - name: create_aro_cluster | Set cluster cert path
      ansible.builtin.set_fact:
        cluster_cert_file: /usr/local/share/ca-certificates/{{ inventory_hostname }}.crt
    - name: create_aro_cluster | Install serving certificate locally
      ansible.builtin.copy:
        dest: "{{ cluster_cert_file }}"
        content: |
          {%- if apiserver_servingcert.resources[0].data["tls.crt"] | default("") != "" -%}
          servingcert:
          {{ apiserver_servingcert.resources[0].data["tls.crt"] | b64decode }}
          {% endif %}
          live api certificate (possibly interim self-signed):
          {% for item in apiserver_certificate.verified_chain %}{{ item }}{% endfor %}

          live ingress certificate (possibly interim self-signed):
          {% for item in ingress_certificate.verified_chain %}{{ item }}{% endfor %}
        mode: "0644"
        owner: root
        group: root
      become: true
      delegate_to: "{{ delegation }}"
      register: cluster_ca_certificate
    - name: create_aro_cluster | Update CA Certificates
      when: cluster_ca_certificate is changed # noqa no-handler
      ansible.builtin.command:
        argv: ["update-ca-certificates"]
      become: true
      delegate_to: "{{ delegation }}"
      register: update_ca_certificates
      changed_when: true
    - name: create_aro_cluster | Debug update_ca_certificates
      ansible.builtin.debug:
        var: update_ca_certificates.stdout_lines
        verbosity: 1

- name: create_aro_cluster | Trust the cluster's certificate (RHEL version)
  when: delegation == "localhost"
  block:
    - name: create_aro_cluster | Set cluster cert path
      ansible.builtin.set_fact:
        cluster_cert_file: /etc/pki/ca-trust/source/anchors/{{ inventory_hostname }}.crt
    - name: create_aro_cluster | Install serving certificate locally
      ansible.builtin.copy:
        dest: "{{ cluster_cert_file }}"
        content: |
          servingcert:
          {%- if apiserver_servingcert.resources[0].data["tls.crt"] | default("") != "" -%}
          servingcert:
          {{ apiserver_servingcert.resources[0].data["tls.crt"] | b64decode }}
          {% endif %}
          live certificate (possibly interim self-signed):
          {% for item in apiserver_certificate.verified_chain %}{{ item }}{% endfor %}

          live ingress certificate (possibly interim self-signed):
          {% for item in ingress_certificate.verified_chain %}{{ item }}{% endfor %}
        mode: "0644"
        owner: root
        group: root
      become: true
      delegate_to: "{{ delegation }}"
      register: cluster_ca_certificate
    - name: create_aro_cluster | Update CA Certificates
      when: cluster_ca_certificate is changed # noqa no-handler
      ansible.builtin.command:
        argv: ["update-ca-trust"]
      become: true
      delegate_to: "{{ delegation }}"
      register: update_ca_certificates
      changed_when: true
    - name: create_aro_cluster | Debug update_ca_certificates
      ansible.builtin.debug:
        var: update_ca_certificates.stdout_lines
        verbosity: 1

- name: create_aro_cluster | Debug cluster_ca_certificate
  ansible.builtin.debug:
    var: cluster_ca_certificate
    verbosity: 1
- name: create_aro_cluster | Debug cluster_cert_file
  ansible.builtin.debug:
    var: cluster_cert_file
    verbosity: 1
- name: create_aro_cluster | Install current version release-image signature to make CVO happy
  when: outbound_type | d("LoadBalancer") == "UserDefinedRouting"
  block:
    - name: create_aro_cluster | Get clusterversion version
      kubernetes.core.k8s_info:
        ca_cert: "{{ cluster_cert_file }}"
        kubeconfig: "{{ inventory_hostname }}.kubeconfig"
        api_version: config.openshift.io/v1
        kind: ClusterVersion
        name: version
      delegate_to: "{{ delegation }}"
      register: oc_get_clusterversion
    - name: create_aro_cluster | Get current version
      ansible.builtin.set_fact:
        clusterversion_version: "{{ oc_get_clusterversion.resources[0].status.desired.version }}"
    - name: create_aro_cluster | Get image for disconnected clusters
      ansible.builtin.set_fact:
        ocp_explicit_image: |-
          {{
            lookup("ansible.builtin.url",
              "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/" + clusterversion_version + "/release.txt")
            | regex_search("(?<=Pull From: )(?P<image_url>[a-z0-9.\-/@:]+)")
          }}
    - name: create_aro_cluster | Get image signature # noqa: command-instead-of-module
      when: ocp_explicit_image is defined
      ansible.builtin.shell: |
        set -o pipefail
        curl -s "https://mirror.openshift.com/pub/openshift-v4/signatures/openshift/release/{{ image_sig_string }}/signature-1" | base64 -w0
      vars:
        image_sig_string: '{{ ocp_explicit_image | regex_replace("^.+@", "") | replace(":", "=") }}'
      register: ocp_explicit_image_sig
      delegate_to: localhost
      changed_when: false
    - name: create_aro_cluster | Apply image signature
      # Use older method, directly creating the signature ConfigMap
      # https://docs.openshift.com/container-platform/4.7/updating/updating-restricted-network-cluster.html#update-configuring-image-signature
      when: ocp_explicit_image_sig is defined
      kubernetes.core.k8s:
        ca_cert: "{{ cluster_cert_file }}"
        kubeconfig: "{{ inventory_hostname }}.kubeconfig"
        api_version: v1
        kind: ConfigMap
        namespace: openshift-config-managed
        name: release-image-{{ clusterversion_version }}
        resource_definition: |
          metadata:
            labels:
              release.openshift.io/verification-signatures: ""
          binaryData:
            {{ ocp_explicit_image | regex_replace("^.+@", "") | replace(":", "-") }}: "{{ ocp_explicit_image_sig.stdout }}"
      delegate_to: "{{ delegation }}"
      register: apply_release_image_sig
    - name: create_aro_cluster | Pause 5 minutes for upgrade to begin
      # Pausing here because it takes a while for Progressing to become True
      when: apply_release_image_sig is changed
      ansible.builtin.wait_for:
        timeout: 300
      delegate_to: "{{ delegation }}"

- name: create_aro_cluster | Wait for clusterversion to become Available and not Progressing
  kubernetes.core.k8s_info:
    ca_cert: "{{ cluster_cert_file }}"
    kubeconfig: "{{ inventory_hostname }}.kubeconfig"
    api_version: config.openshift.io/v1
    kind: ClusterVersion
    name: version
  delegate_to: "{{ delegation }}"
  register: oc_get_clusterversion
  vars:
    clusterversion_conditions: |
      {{ oc_get_clusterversion.resources[0].status.conditions
         | items2dict(key_name="type", value_name="status") }}
- name: create_aro_cluster | Debug oc_get_clusterversion spec
  ansible.builtin.debug:
    var: oc_get_clusterversion.resources[0].spec
    verbosity: 1
- name: create_aro_cluster | Debug oc_get_clusterversion conditions
  ansible.builtin.debug:
    var: oc_get_clusterversion.resources[0].status.conditions
    verbosity: 1

- name: create_aro_cluster | Wait for cluster operators to stop progressing
  kubernetes.core.k8s_info:
    ca_cert: "{{ cluster_cert_file }}"
    kubeconfig: "{{ inventory_hostname }}.kubeconfig"
    api_version: config.openshift.io/v1
    kind: ClusterOperator
  delegate_to: "{{ delegation }}"
  register: oc_get_co
  vars:
    clusteroperator_progressing: |-
      {% set comma = joiner(",") %}
      [{%- for co in oc_get_co.resources -%}
        {%- for c in co.status.conditions -%}
          {%- if c.type == "Progressing" and c.status == "True" -%}
            {{ comma() }}"{{ co.metadata.name }}"
          }{%- endif %}{% endfor -%}
      {%- endfor -%}
      ]
  failed_when: clusteroperator_progressing | length > 0
  retries: 60
  delay: 60

- name: create_aro_cluster | Validate clusterversion status conditions
  ansible.builtin.fail:
    msg: "Cluster is failing"
  when: item.type == "Failing" and item.status == "True" or
    item.type == "Available" and item.status == "False"
  loop: "{{ oc_get_clusterversion.resources[0].status.conditions }}"
  retries: 20
  delay: 60

- name: create_aro_cluster | Get nodes
  kubernetes.core.k8s_info:
    ca_cert: "{{ cluster_cert_file }}"
    kubeconfig: "{{ inventory_hostname }}.kubeconfig"
    api_version: v1
    kind: Node
  delegate_to: "{{ delegation }}"
  register: oc_get_nodes
  retries: 3
  delay: 60 # A few retries in case the certificate hasn't finished rolling out
- name: create_aro_cluster | Validate node conditions
  loop: |
    {% set comma = joiner(",") %}
    [{%- for node in oc_get_nodes.resources -%}
      {%- for c in node.status.conditions -%}
        {{ comma() }}
        {
          "name": "{{ node.metadata.name }}",
          "condition": {{ c }}
        }{%- endfor -%}
    {%- endfor -%}
    ]
  when: (item.condition.type == "Ready" and item.condition.status != "True") or
    (item.condition.type != "Ready" and item.condition.status != "False")
  ansible.builtin.fail:
    msg: "Condition {{ item.condition.type }} is not acceptible on node {{ item.name }}"

- name: create_aro_cluster | Validate cluster operator conditions
  loop: |
    {% set comma = joiner(",") %}
    [{%- for co in oc_get_co.resources -%}
      {%- for c in co.status.conditions -%}
        {%- if c.type == "Available" or c.type == "Degraded" -%}
        {{ comma() }}
        {
          "name": "{{ co.metadata.name }}",
          "condition": {{ c }}
        }{%- endif %}{% endfor -%}
    {%- endfor -%}
    ]
  when:
    (item.condition.type == "Available" and item.condition.status != "True") or
    (item.condition.type == "Degraded" and item.condition.status != "False")
  ansible.builtin.fail:
    msg: "Cluster operator {{ item.name }} {{ item.condition.type }} is {{ item.condition.status }}."

- name: create_aro_cluster | Get cluster operators
  kubernetes.core.k8s_info:
    ca_cert: "{{ cluster_cert_file }}"
    kubeconfig: "{{ inventory_hostname }}.kubeconfig"
    api_version: config.openshift.io/v1
    kind: ClusterOperator
  delegate_to: "{{ delegation }}"
  register: oc_get_co
- name: create_aro_cluster | Validate cluster operator conditions
  loop: |
    {% set comma = joiner(",") %}
    [{%- for co in oc_get_co.resources -%}
      {%- for c in co.status.conditions -%}
        {%- if c.type == "Available" or c.type == "Degraded" -%}
        {{ comma() }}
        {
          "name": "{{ co.metadata.name }}",
          "condition": {{ c }}
        }{%- endif %}{% endfor -%}
    {%- endfor -%}
    ]
  when:
    (item.condition.type == "Available" and item.condition.status != "True") or
    (item.condition.type == "Degraded" and item.condition.status != "False")
  ansible.builtin.fail:
    msg: "Cluster operator {{ item.name }} {{ item.condition.type }} is {{ item.condition.status }}."

- name: create_aro_cluster | Register oc_arch
  ansible.builtin.set_fact:
    oc_arch: >-
      {{ oc_arch_map[localhost_facts.ansible_facts['ansible_architecture']] if delegation == "localhost"
      else oc_arch_map[jumphost_facts.ansible_facts['ansible_architecture']] }}
  vars:
    oc_arch_map:
      aarch64: arm64
      x86_64: amd64

- name: create_aro_cluster | Install `oc` binary from cluster
  ansible.builtin.unarchive:
    creates: /usr/local/bin/oc
    src: >
      {{ aro_cluster_state.clusters.properties.consoleProfile.url
         | replace('console-openshift-console', 'downloads-openshift-console')
      }}{{ oc_arch }}/linux/oc.tar
    remote_src: true
    dest: /usr/local/bin/
    include: ["oc"]
    mode: "0755"
    owner: root
    group: root
    validate_certs: '{% if rp_mode|d("production") == "development" %}false{% else %}{{ omit }}{% endif %}'
  become: true
  delegate_to: "{{ delegation }}"
- name: create_aro_cluster | Get oc version
  ansible.builtin.command:
    argv: "{{ argv | reject('equalto', omit) | list }}"
  vars:
    argv:
      - oc
      - version
      - --kubeconfig={{ inventory_hostname }}.kubeconfig
  delegate_to: "{{ delegation }}"
  register: oc_version
  changed_when: oc_version.rc == 0
  retries: 3
  delay: 60 # A few retries in case the certificate hasn't finished rolling out
- name: create_aro_cluster | Show oc version
  ansible.builtin.debug:
    var: oc_version.stdout_lines
    verbosity: 1

- name: create_aro_cluster | Enable cluster wide proxy
  when: cluster_wide_proxy | d(False)
  block:
    - name: create_aro_cluster | Get cluster.aro/cluster
      kubernetes.core.k8s_info:
        ca_cert: "{{ cluster_cert_file }}"
        kubeconfig: "{{ inventory_hostname }}.kubeconfig"
        name: cluster
        api_version: aro.openshift.io/v1alpha1
        kind: Cluster
      delegate_to: "{{ delegation }}"
      register: oc_get_cluster_aro
    - name: create_aro_cluster | Debug oc_get_cluster_aro
      ansible.builtin.debug:
        var: oc_get_cluster_aro
        verbosity: 1
    - name: create_aro_cluster | Configure cluster wide proxy
      kubernetes.core.k8s:
        ca_cert: "{{ cluster_cert_file }}"
        kubeconfig: "{{ inventory_hostname }}.kubeconfig"
        name: cluster
        api_version: config.openshift.io/v1
        kind: Proxy
        resource_definition:
          spec:
            httpProxy: http://{{ jumphost_facts.ansible_facts.ansible_default_ipv4.address }}:3128
            httpsProxy: http://{{ jumphost_facts.ansible_facts.ansible_default_ipv4.address }}:3128
            noProxy: |
              {{ (
                oc_get_cluster_aro.resources[0].spec.gatewayDomains
                + [ ".cluster.local", ".svc", "localhost" ]
                + [ "169.254.169.254", "168.63.129.16" ]
                + [ 'api-int.' + oc_get_cluster_aro.resources[0].spec.domain ]
                + [ 'int.' + oc_get_cluster_aro.resources[0].spec.domain ]
                + [ '.apps.' + oc_get_cluster_aro.resources[0].spec.domain ]
                + [ master_cidr, worker_cidr ]
                ) | sort | join(",") }}
            trustedCA:
              name: ""
      delegate_to: "{{ delegation }}"
      register: set_cluster_proxy
    - name: create_aro_cluster | Debug set_cluster_proxy
      ansible.builtin.debug:
        var: set_cluster_proxy
        verbosity: 1

- name: create_aro_cluster | Begin upgrade process
  loop: "{{ upgrade }}"
  loop_control:
    loop_var: upgrade_item
  when: upgrade is defined
  ansible.builtin.include_tasks:
    file: ../../tasks/upgrade_cluster.yaml
